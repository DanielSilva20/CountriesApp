//
//  HomePresenter.swift
//  CountriesApp
//
//  Created by Daniel Silva on 28/03/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomePresentationLogic {
    func presentCountrySearchResult(response: Home.Search.Response)
    func presentError(error: Error)
}

class HomePresenter: HomePresentationLogic {
    weak var viewController: HomeDisplayLogic?

    func presentCountrySearchResult(response: Home.Search.Response) {
        let viewModel: Home.Search.ViewModel

        switch response.result {
        case .success(let country):
            let language = country.languages.values.first ?? "N/A"
            let currency = country.currencies.values.first.map { "\($0.name) (\($0.symbol))" } ?? "N/A"

            viewModel = Home.Search.ViewModel(countryCode: country.cca2, language: language, currency: currency, isError: false, errorMessage: "")
        case .failure:
            viewModel = Home.Search.ViewModel(countryCode: "N/A", language: "N/A", currency: "N/A", isError: true, errorMessage: "")
        }

        viewController?.displayCountrySearchResult(viewModel: viewModel)
    }

    func presentError(error: Error) {
        var message = ""

        switch error {
        case NetworkError.invalidURL:
            message = "Invalid URL"
        case NetworkError.noData:
            message = "No data received"
        case NetworkError.decodingError:
            message = "Error decoding data"
        case APIError.notFound:
            message = "Country not found"
        case let APIError.other(apiError):
            message = "API error: \(apiError.localizedDescription)"
        default:
            message = "Unexpected error occurred"
        }

        let viewModel = Home.Search.ViewModel(countryCode: "N/A", language: "N/A", currency: "N/A", isError: true, errorMessage: message)
        viewController?.displayCountrySearchResult(viewModel: viewModel)
    }
}
