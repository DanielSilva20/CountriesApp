//
//  CountryDetailViewController.swift
//  CountriesApp
//
//  Created by Daniel Silva on 29/03/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CountryDetailDisplayLogic: AnyObject {
    func displayCountrySearchResult(viewModel: CountryDetail.CountryDetail.ViewModel)
}

class CountryDetailViewController: UIViewController, CountryDetailDisplayLogic {
    var interactor: CountryDetailBusinessLogic?
    var router: (NSObjectProtocol & CountryDetailRoutingLogic & CountryDetailDataPassing)?

    private var verticalStackView: UIStackView!

    private var flagView: UIImageView!
    private var countryFlag: UIImage!

    private var countryCode: UILabel!
    private var countryLanguage: UILabel!
    private var countryCurrency: UILabel!

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
        createViews()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    func createViews() {
        setUpViews()
        addViewsToSuperview()
        setUpConstraints()
    }

    private func setUpViews() {
        verticalStackView = UIStackView()
        verticalStackView.axis = .vertical
        verticalStackView.alignment = .center
        verticalStackView.distribution = .fill
        verticalStackView.spacing = 8

        countryFlag = UIImage()
        flagView = UIImageView(image: countryFlag)
        flagView.contentMode = .scaleAspectFit
        flagView.clipsToBounds = true

        countryCode = UILabel()
        countryCurrency = UILabel()
        countryLanguage = UILabel()
        countryLanguage.numberOfLines = 2
        countryLanguage.textAlignment = .center

        verticalStackView.addArrangedSubview(countryCode)
        verticalStackView.addArrangedSubview(countryCurrency)
        verticalStackView.addArrangedSubview(countryLanguage)
    }

    private func addViewsToSuperview() {
        view.addSubview(flagView)
        view.addSubview(verticalStackView)
    }

    private func setUpConstraints() {
        verticalStackView.translatesAutoresizingMaskIntoConstraints = false
        flagView.translatesAutoresizingMaskIntoConstraints = false

        NSLayoutConstraint.activate([
            flagView.widthAnchor.constraint(equalTo: view.widthAnchor, multiplier: 0.5),
            flagView.heightAnchor.constraint(equalTo: flagView.widthAnchor),
            flagView.topAnchor.constraint(equalTo: view.safeAreaLayoutGuide.topAnchor, constant: 20),
            flagView.centerXAnchor.constraint(equalTo: view.centerXAnchor),

            verticalStackView.centerXAnchor.constraint(equalTo: view.centerXAnchor),
            verticalStackView.centerYAnchor.constraint(equalTo: view.centerYAnchor)
        ])
    }
    
    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = CountryDetailInteractor()
        let presenter = CountryDetailPresenter()
        let router = CountryDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        view.backgroundColor = .white
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        passCountryData()
    }

    // MARK: Do something

    func passCountryData() {
        guard let country = router?.dataStore?.country else { return }
        let request = CountryDetail.CountryDetail.Request(country: country)
        interactor?.getCountryData(request: request)
    }

    func displayCountrySearchResult(viewModel: CountryDetail.CountryDetail.ViewModel) {
        DispatchQueue.main.async { [weak self] in
            self?.flagView.image = viewModel.flag
            self?.countryCode.text = viewModel.countryCode
            self?.countryCurrency.text = viewModel.currency
            self?.countryLanguage.text = viewModel.language
        }
    }
}
